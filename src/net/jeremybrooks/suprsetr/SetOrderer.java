/*
 * SuprSetr is Copyright 2010-2011 by Jeremy Brooks
 *
 * This file is part of SuprSetr.
 *
 *  SuprSetr is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  SuprSetr is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with SuprSetr.  If not, see <http://www.gnu.org/licenses/>.
*/

package net.jeremybrooks.suprsetr;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.SwingUtilities;
import net.jeremybrooks.suprsetr.workers.OrderSetsWorker;
import net.jeremybrooks.suprsetr.workers.SetOrdererDTOListWorker;
import org.apache.log4j.Logger;


/**
 * Allow the user to change the order of their photosets.
 *
 * <p>The user can drag and drop the sets in the list.
 *
 * @author jeremyb
 */
public class SetOrderer extends javax.swing.JDialog {

    /** Logging. */
    private Logger logger = Logger.getLogger(SetOrderer.class);

    /** The list model. */
    private DefaultListModel listModel;

    /** The data list. */
    List<SetOrdererDTO> dtoList;


    /** Creates new form SetOrdererDiallog */
    public SetOrderer(java.awt.Frame parent, boolean modal) {
	super(parent, modal);

	this.listModel = new DefaultListModel();

	initComponents();
	ReorderListener reorderListener = new ReorderListener(this.jList1);
	this.jList1.addMouseListener(reorderListener);
	this.jList1.addMouseMotionListener(reorderListener);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        cmbOrder = new javax.swing.JComboBox();
        btnSave = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Set Ordering Tool");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Set Ordering Scheme:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(jLabel1, gridBagConstraints);

        cmbOrder.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Manual", "Sort Alpha (A-Z)", "Sort Reverse Alpha (Z-A)", "Sort By Number Of Photos (high-low)", "Sort By Number Of Photos (low-high)" }));
        cmbOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOrderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 3);
        getContentPane().add(cmbOrder, gridBagConstraints);

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(btnSave, gridBagConstraints);

        jList1.setModel(this.listModel);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setCellRenderer(new SetOrdererRenderer());
        jScrollPane1.setViewportView(jList1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(btnCancel, gridBagConstraints);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-429)/2, (screenSize.height-629)/2, 429, 629);
    }// </editor-fold>//GEN-END:initComponents


    /**
     * Sort the list when the user changes the sort scheme.
     * 
     * @param evt
     */
    private void cmbOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOrderActionPerformed

	switch (this.cmbOrder.getSelectedIndex()) {
	    case 0:
		break;

	    case 1:
		this.sort(new AlphaAscending());
		break;

	    case 2:
		this.sort(new AlphaDescending());
		break;

	    case 3:
		this.sort(new CountHighToLow());
		break;

	    case 4:
		this.sort(new CountLowToHigh());
		break;

	    default:
		break;
	}

    }//GEN-LAST:event_cmbOrderActionPerformed


    /**
     * Reorder the sets.
     *
     * 
     * @param evt
     */
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
	List<String> photosetIds = new ArrayList<String>();
	
	logger.info("New photoset order");
	for (int i = 0; i < this.listModel.size(); i++) {
	    SetOrdererDTO dto = (SetOrdererDTO) this.listModel.getElementAt(i);
	    logger.info(dto.getId() + " : " + dto.getTitle());
	    photosetIds.add(dto.getId());
	}

	BlockerPanel blocker = new BlockerPanel(this, "Ordering Sets....");
	setGlassPane(blocker);
	new OrderSetsWorker(blocker, photosetIds).execute();
    }//GEN-LAST:event_btnSaveActionPerformed


    /**
     * Cancel operation.
     * 
     * @param evt
     */
    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
	this.setVisible(false);
	this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed



    /**
     * Sort the dto list using the specified comparator.
     *
     * <p>The list will be sorted, and the ListModel updated.</p>
     *
     * @param comparator the comparator used to sort the list.
     */
    private void sort(Comparator<SetOrdererDTO> comparator) {
	Collections.sort(dtoList, comparator);
	SwingUtilities.invokeLater(new UpdateListModel());
	jList1.scrollRectToVisible(jList1.getCellBounds(0, 0));
    }


    /**
     * Create a blocker panel, then start the worker and make the
     * dialog visible.
     *
     * @param visible 
     */
    @Override
    public void setVisible(boolean visible) {

	// get to work
	BlockerPanel blocker = new BlockerPanel(this, "Getting sets from Flickr");
	this.setGlassPane(blocker);
	blocker.block("Working...");
	new SetOrdererDTOListWorker(blocker, listModel, this).execute();
	super.setVisible(visible);
    }


    /**
     * Sets the DTO list.
     *
     * @param dtoList
     */
    public void setDtoList(List<SetOrdererDTO> dtoList) {
	this.dtoList = dtoList;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cmbOrder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables



    /**
     * Class to update the ListModel.
     *
     * This should be executed on the EventDispatch Thread using
     * SwingUtilities.invokeAndWait().
     *
     */
    class UpdateListModel implements Runnable {

	@Override
	public void run() {
	    listModel.clear();
	    for (SetOrdererDTO dto : dtoList) {
		listModel.addElement(dto);
	    }
	}

    }



    /**
     * Sort the list alphabetically by title.
     *
     */
    class AlphaAscending implements Comparator<SetOrdererDTO> {

	/**
	 * Compares its two arguments for order.
	 * Returns a negative integer, zero, or a positive integer as the
	 * first argument is less than, equal to, or greater than the second.

	 * @param o1
	 * @param o2
	 * @return
	 */
	@Override
	public int compare(SetOrdererDTO o1, SetOrdererDTO o2) {
	    return (o1.getTitle().toLowerCase().compareTo(o2.getTitle().toLowerCase()));
	}

    }



    /**
     * Sort the list reverse-alphabetically by title.
     */
    class AlphaDescending implements Comparator<SetOrdererDTO> {

	/**
	 * Compares its two arguments for order.
	 * Returns a negative integer, zero, or a positive integer as the
	 * first argument is less than, equal to, or greater than the second.

	 * @param o1
	 * @param o2
	 * @return
	 */
	@Override
	public int compare(SetOrdererDTO o1, SetOrdererDTO o2) {
	    return -(o1.getTitle().toLowerCase().compareTo(o2.getTitle().toLowerCase()));
	}

    }



    /**
     * Sort the list by number of photos from high to low.
     */
    class CountHighToLow implements Comparator<SetOrdererDTO> {

	/**
	 * Compares its two arguments for order.
	 * Returns a negative integer, zero, or a positive integer as the
	 * first argument is less than, equal to, or greater than the second.

	 * @param o1
	 * @param o2
	 * @return
	 */
	@Override
	public int compare(SetOrdererDTO o1, SetOrdererDTO o2) {
	    if (o1.getPhotoCount() == o2.getPhotoCount()) {
		return 0;
	    }

	    return o1.getPhotoCount() > o2.getPhotoCount() ? -1 : 1;

	}

    }



    /**
     * Sort the list by number of photos from low to high.
     */
    class CountLowToHigh implements Comparator<SetOrdererDTO> {

	/**
	 * Compares its two arguments for order.
	 * Returns a negative integer, zero, or a positive integer as the
	 * first argument is less than, equal to, or greater than the second.

	 * @param o1
	 * @param o2
	 * @return
	 */
	@Override
	public int compare(SetOrdererDTO o1, SetOrdererDTO o2) {
	    if (o1.getPhotoCount() == o2.getPhotoCount()) {
		return 0;
	    }

	    return o1.getPhotoCount() > o2.getPhotoCount() ? 1 : -1;
	}

    }



    /**
     * MouseListener to implement drag and drop reordering of sets.
     * 
     */
    class ReorderListener extends MouseAdapter {

	private JList list;

	private int pressIndex = 0;

	private int releaseIndex = 0;



	public ReorderListener(JList list) {
	    if (!(list.getModel() instanceof DefaultListModel)) {
		throw new IllegalArgumentException("List must have a DefaultListModel");
	    }
	    this.list = list;
	}


	@Override
	public void mousePressed(MouseEvent e) {
	    pressIndex = list.locationToIndex(e.getPoint());
	}


	@Override
	public void mouseReleased(MouseEvent e) {
	    releaseIndex = list.locationToIndex(e.getPoint());
	    if (releaseIndex != pressIndex && releaseIndex != -1) {
		reorder();
	    }
	}


	@Override
	public void mouseDragged(MouseEvent e) {
	    mouseReleased(e);
	    pressIndex = releaseIndex;
	}


	private void reorder() {
	    DefaultListModel model = (DefaultListModel) list.getModel();
	    Object dragee = model.elementAt(pressIndex);
	    model.removeElementAt(pressIndex);
	    model.insertElementAt(dragee, releaseIndex);
	}

    }
}
