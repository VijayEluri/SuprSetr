/*
 * SuprSetr is Copyright 2010 by Jeremy Brooks
 *
 * This file is part of SuprSetr.
 *
 *  SuprSetr is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  SuprSetr is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with SuprSetr.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.jeremybrooks.suprsetr;

import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import net.jeremybrooks.suprsetr.SetEditor.EditorMode;
import net.jeremybrooks.suprsetr.dao.DAOHelper;
import net.jeremybrooks.suprsetr.dao.LookupDAO;
import net.jeremybrooks.suprsetr.dao.PhotosetDAO;
import net.jeremybrooks.suprsetr.flickr.FlickrHelper;
import net.jeremybrooks.suprsetr.tutorial.Tutorial;
import net.jeremybrooks.suprsetr.utils.SSUtils;
import net.jeremybrooks.suprsetr.workers.AddPhotosetWorker;
import net.jeremybrooks.suprsetr.workers.DatabaseBackupWorker;
import net.jeremybrooks.suprsetr.workers.DatabaseRestoreWorker;
import net.jeremybrooks.suprsetr.workers.DeletePhotosetWorker;
import net.jeremybrooks.suprsetr.workers.FavDeleteWorker;
import net.jeremybrooks.suprsetr.workers.FavrTagrWorker;
import net.jeremybrooks.suprsetr.workers.LoadFlickrSetsWorker;
import net.jeremybrooks.suprsetr.workers.FilterSetListWorker;
import net.jeremybrooks.suprsetr.workers.RefreshPhotosetWorker;
import net.whirljack.common.util.FilenameContainsFilter;
import net.whirljack.common.util.IOUtil;
import org.apache.log4j.Logger;


/**
 *
 * @author jeremyb
 */
public class MainWindow extends javax.swing.JFrame {

    /** Logging. */
    private Logger logger = Logger.getLogger(MainWindow.class);

    /** List model. */
    private DefaultListModel listModel;

    /** Master list. */
    private List<SSPhotoset> masterList;

    /** Reference to this window. */
    private static MainWindow theWindow;

    /** Log window */
    private LogWindow logWindow = null;


    /** Creates new form MainWindow */
    public MainWindow() {

	this.listModel = new DefaultListModel();

	initComponents();

	this.setUpdateAvailable(false);

	this.mnuHideUnmanaged.setSelected(DAOHelper.stringToBoolean(LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_HIDE_UNMANAGED)));
	this.mnuCaseSensitive.setSelected(DAOHelper.stringToBoolean(LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_CASE_SENSITIVE)));
	
	try {
	    setBounds(
		    Integer.parseInt(LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_X)),
		    Integer.parseInt(LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_Y)),
		    Integer.parseInt(LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_WIDTH)),
		    Integer.parseInt(LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_HEIGHT)));
	} catch (Exception e) {
	    // ignore
	}

	// remove some menus that live in other places on a Mac
	if (System.getProperty("mrj.version") != null) {
	    this.mnuFile.remove(this.mnuQuit);
	    this.mnuEdit.remove(this.mnuPrefsSeparator);
	    this.mnuEdit.remove(this.mnuPreferences);
	    this.mnuHelp.remove(this.mnuAbout);
	}

	MainWindow.theWindow = this;

	this.logWindow = new LogWindow();
	LogWindow.addLogMessage("Started up at " + new Date());

    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mnuPopup = new javax.swing.JPopupMenu();
        mnuPopupCreate = new javax.swing.JMenuItem();
        mnuPopupEdit = new javax.swing.JMenuItem();
        mnuPopupDelete = new javax.swing.JMenuItem();
        mnuPopupRefresh = new javax.swing.JMenuItem();
        mnuPopupOpen = new javax.swing.JMenuItem();
        jToolBar1 = new javax.swing.JToolBar();
        btnAddSet = new javax.swing.JButton();
        btnEditSet = new javax.swing.JButton();
        btnDeleteSet = new javax.swing.JButton();
        btnRefreshSet = new javax.swing.JButton();
        btnRefreshAll = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jLabel1 = new javax.swing.JLabel();
        txtFilter = new javax.swing.JTextField();
        btnFilter = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuBrowser = new javax.swing.JMenuItem();
        mnuBackup = new javax.swing.JMenuItem();
        mnuRestore = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuQuit = new javax.swing.JMenuItem();
        mnuEdit = new javax.swing.JMenu();
        mnuCreateSet = new javax.swing.JMenuItem();
        mnuEditSet = new javax.swing.JMenuItem();
        mnuDeleteSet = new javax.swing.JMenuItem();
        mnuRefreshSet = new javax.swing.JMenuItem();
        mnuRefreshAll = new javax.swing.JMenuItem();
        mnuPrefsSeparator = new javax.swing.JPopupMenu.Separator();
        mnuPreferences = new javax.swing.JMenuItem();
        mnuView = new javax.swing.JMenu();
        mnuHideUnmanaged = new javax.swing.JCheckBoxMenuItem();
        mnuCaseSensitive = new javax.swing.JCheckBoxMenuItem();
        mnuLogWindow = new javax.swing.JMenuItem();
        mnuTools = new javax.swing.JMenu();
        mnuFavr = new javax.swing.JMenuItem();
        mnuClearFave = new javax.swing.JMenuItem();
        mnuSetOrder = new javax.swing.JMenuItem();
        mnuLogs = new javax.swing.JMenuItem();
        mnuHelp = new javax.swing.JMenu();
        mnuAbout = new javax.swing.JMenuItem();
        mnuTutorial = new javax.swing.JMenuItem();
        mnuSSHelp = new javax.swing.JMenuItem();

        mnuPopupCreate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add16.png"))); // NOI18N
        mnuPopupCreate.setText("Create Set");
        mnuPopupCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPopupCreateActionPerformed(evt);
            }
        });
        mnuPopup.add(mnuPopupCreate);

        mnuPopupEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit16.png"))); // NOI18N
        mnuPopupEdit.setText("Edit Set");
        mnuPopupEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPopupEditActionPerformed(evt);
            }
        });
        mnuPopup.add(mnuPopupEdit);

        mnuPopupDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete16.png"))); // NOI18N
        mnuPopupDelete.setText("Delete Set");
        mnuPopupDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPopupDeleteActionPerformed(evt);
            }
        });
        mnuPopup.add(mnuPopupDelete);

        mnuPopupRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh16.png"))); // NOI18N
        mnuPopupRefresh.setText("Refresh Set");
        mnuPopupRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPopupRefreshActionPerformed(evt);
            }
        });
        mnuPopup.add(mnuPopupRefresh);

        mnuPopupOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/web16.png"))); // NOI18N
        mnuPopupOpen.setText("Open Set in Browser");
        mnuPopupOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPopupOpenActionPerformed(evt);
            }
        });
        mnuPopup.add(mnuPopupOpen);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SuprSetr");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/images/s64.png")).getImage());

        jToolBar1.setRollover(true);

        btnAddSet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add16.png"))); // NOI18N
        btnAddSet.setToolTipText("Create a new set");
        btnAddSet.setFocusable(false);
        btnAddSet.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddSet.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSetActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAddSet);

        btnEditSet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit16.png"))); // NOI18N
        btnEditSet.setToolTipText("Edit selected set");
        btnEditSet.setFocusable(false);
        btnEditSet.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEditSet.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEditSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditSetActionPerformed(evt);
            }
        });
        jToolBar1.add(btnEditSet);

        btnDeleteSet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete16.png"))); // NOI18N
        btnDeleteSet.setToolTipText("Delete selected set");
        btnDeleteSet.setFocusable(false);
        btnDeleteSet.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDeleteSet.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDeleteSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteSetActionPerformed(evt);
            }
        });
        jToolBar1.add(btnDeleteSet);

        btnRefreshSet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh16.png"))); // NOI18N
        btnRefreshSet.setToolTipText("Refresh selected set");
        btnRefreshSet.setFocusable(false);
        btnRefreshSet.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRefreshSet.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRefreshSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshSetActionPerformed(evt);
            }
        });
        jToolBar1.add(btnRefreshSet);

        btnRefreshAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refreshall16.png"))); // NOI18N
        btnRefreshAll.setToolTipText("Refresh all sets.");
        btnRefreshAll.setFocusable(false);
        btnRefreshAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRefreshAll.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRefreshAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshAllActionPerformed(evt);
            }
        });
        jToolBar1.add(btnRefreshAll);

        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/new16.png"))); // NOI18N
        btnUpdate.setText("Update Available");
        btnUpdate.setToolTipText("A new version is available. Click to visit the download page.");
        btnUpdate.setFocusable(false);
        btnUpdate.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnUpdate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jToolBar1.add(btnUpdate);
        jToolBar1.add(jSeparator2);

        jLabel1.setText("Filter");
        jToolBar1.add(jLabel1);

        txtFilter.setToolTipText("Filter displayed sets by title");
        txtFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFilterKeyReleased(evt);
            }
        });
        jToolBar1.add(txtFilter);

        btnFilter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/filter16.png"))); // NOI18N
        btnFilter.setEnabled(false);
        btnFilter.setFocusable(false);
        btnFilter.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnFilter.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });
        jToolBar1.add(btnFilter);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        jList1.setModel(this.listModel);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setCellRenderer(new SetListRenderer());
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jList1MousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        mnuFile.setText("File");

        mnuBrowser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/web16.png"))); // NOI18N
        mnuBrowser.setText("Open Set in Browser");
        mnuBrowser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBrowserActionPerformed(evt);
            }
        });
        mnuFile.add(mnuBrowser);

        mnuBackup.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/database16.png"))); // NOI18N
        mnuBackup.setText("Backup Database");
        mnuBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuBackupActionPerformed(evt);
            }
        });
        mnuFile.add(mnuBackup);

        mnuRestore.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/database16.png"))); // NOI18N
        mnuRestore.setText("Restore Database");
        mnuRestore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRestoreActionPerformed(evt);
            }
        });
        mnuFile.add(mnuRestore);
        mnuFile.add(jSeparator1);

        mnuQuit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/quit16.png"))); // NOI18N
        mnuQuit.setText("Quit");
        mnuQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuQuitActionPerformed(evt);
            }
        });
        mnuFile.add(mnuQuit);

        jMenuBar1.add(mnuFile);

        mnuEdit.setText("Edit");

        mnuCreateSet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add16.png"))); // NOI18N
        mnuCreateSet.setText("Create Set");
        mnuCreateSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCreateSetActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuCreateSet);

        mnuEditSet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/edit16.png"))); // NOI18N
        mnuEditSet.setText("Edit Set");
        mnuEditSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuEditSetActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuEditSet);

        mnuDeleteSet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/delete16.png"))); // NOI18N
        mnuDeleteSet.setText("Delete Set");
        mnuDeleteSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuDeleteSetActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuDeleteSet);

        mnuRefreshSet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh16.png"))); // NOI18N
        mnuRefreshSet.setText("Refresh Set");
        mnuRefreshSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRefreshSetActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuRefreshSet);

        mnuRefreshAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refreshall16.png"))); // NOI18N
        mnuRefreshAll.setText("Refresh All Sets");
        mnuRefreshAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRefreshAllActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuRefreshAll);
        mnuEdit.add(mnuPrefsSeparator);

        mnuPreferences.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/process16.png"))); // NOI18N
        mnuPreferences.setText("Preferences");
        mnuPreferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPreferencesActionPerformed(evt);
            }
        });
        mnuEdit.add(mnuPreferences);

        jMenuBar1.add(mnuEdit);

        mnuView.setText("View");
        mnuView.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mnuViewMouseClicked(evt);
            }
        });

        mnuHideUnmanaged.setText("Hide Unmanaged Sets");
        mnuHideUnmanaged.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuHideUnmanagedActionPerformed(evt);
            }
        });
        mnuView.add(mnuHideUnmanaged);

        mnuCaseSensitive.setText("Case Sensitive Sort");
        mnuCaseSensitive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCaseSensitiveActionPerformed(evt);
            }
        });
        mnuView.add(mnuCaseSensitive);

        mnuLogWindow.setText("Show Activity Log");
        mnuLogWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLogWindowActionPerformed(evt);
            }
        });
        mnuView.add(mnuLogWindow);

        jMenuBar1.add(mnuView);

        mnuTools.setText("Tools");

        mnuFavr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/tag16.png"))); // NOI18N
        mnuFavr.setText("FavrTagr");
        mnuFavr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuFavrActionPerformed(evt);
            }
        });
        mnuTools.add(mnuFavr);

        mnuClearFave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/deletetag16.png"))); // NOI18N
        mnuClearFave.setText("Clear Fave Tags");
        mnuClearFave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuClearFaveActionPerformed(evt);
            }
        });
        mnuTools.add(mnuClearFave);

        mnuSetOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/order16.png"))); // NOI18N
        mnuSetOrder.setText("Set Ordering Tool");
        mnuSetOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSetOrderActionPerformed(evt);
            }
        });
        mnuTools.add(mnuSetOrder);

        mnuLogs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/compress16.png"))); // NOI18N
        mnuLogs.setText("Compress Logs");
        mnuLogs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuLogsActionPerformed(evt);
            }
        });
        mnuTools.add(mnuLogs);

        jMenuBar1.add(mnuTools);

        mnuHelp.setText("Help");

        mnuAbout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/help16.png"))); // NOI18N
        mnuAbout.setText("About");
        mnuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuAboutActionPerformed(evt);
            }
        });
        mnuHelp.add(mnuAbout);

        mnuTutorial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/info16.png"))); // NOI18N
        mnuTutorial.setText("View Tutorial");
        mnuTutorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuTutorialActionPerformed(evt);
            }
        });
        mnuHelp.add(mnuTutorial);

        mnuSSHelp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/help16.png"))); // NOI18N
        mnuSSHelp.setText("SuprSetr Help");
        mnuSSHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSSHelpActionPerformed(evt);
            }
        });
        mnuHelp.add(mnuSSHelp);

        jMenuBar1.add(mnuHelp);

        setJMenuBar(jMenuBar1);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-488)/2, (screenSize.height-522)/2, 488, 522);
    }// </editor-fold>//GEN-END:initComponents


    /**
     * Respond to user selecting Quit option from menu.
     * 
     * @param evt
     */
    private void mnuQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuQuitActionPerformed
	this.confirmQuit();
    }//GEN-LAST:event_mnuQuitActionPerformed


    /**
     * Respond to user selecting Create option from menu.
     * @param evt
     */
    private void mnuCreateSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCreateSetActionPerformed
	this.doCreateSetAction();
    }//GEN-LAST:event_mnuCreateSetActionPerformed


    /**
     * Respond to user selecting Edit option from menu.
     * @param evt
     */
    private void mnuEditSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuEditSetActionPerformed
	this.doEditSetAction();
    }//GEN-LAST:event_mnuEditSetActionPerformed


    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
    }//GEN-LAST:event_jList1MouseClicked


    /**
     * Respond to user selecting Delete from menu.
     * 
     * @param evt
     */
    private void mnuDeleteSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuDeleteSetActionPerformed
	this.doDeleteSetAction();
    }//GEN-LAST:event_mnuDeleteSetActionPerformed


    private void mnuRefreshSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRefreshSetActionPerformed
	this.doRefreshSetAction();
    }//GEN-LAST:event_mnuRefreshSetActionPerformed

    
    private void mnuBrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBrowserActionPerformed
	this.doOpenInBrowserAction();
    }//GEN-LAST:event_mnuBrowserActionPerformed

    private void mnuRefreshAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRefreshAllActionPerformed
	SSPhotoset ssPhotoset;

	List<SSPhotoset> list = new ArrayList<SSPhotoset>();

	// Put all sets that are ready for refresh in a list
	for (int i = 0; i < this.listModel.getSize(); i++) {
	    ssPhotoset = (SSPhotoset) this.listModel.getElementAt(i);
	    if (ssPhotoset.isManaged() && SSUtils.readyForUpdate(ssPhotoset.getLastRefreshDate())) {
		list.add(ssPhotoset);
	    }
	}

	// If the list is empty, warn the user
	if (list.size() == 0) {
	    int confirm = JOptionPane.showConfirmDialog(this,
		    "None of your sets are ready to be refreshed.\n"
		    + "Would you like to refresh all managed sets anyway?",
		    "Force Refresh?",
		    JOptionPane.YES_NO_OPTION,
		    JOptionPane.QUESTION_MESSAGE);
	    if (confirm == JOptionPane.YES_OPTION) {

		// Put all managed sets in the list
		for (int i = 0; i < this.listModel.getSize(); i++) {
		    ssPhotoset = (SSPhotoset) this.listModel.getElementAt(i);
		    if (ssPhotoset.isManaged()) {
			list.add(ssPhotoset);
		    }
		}
	    }
	}

	// send the list to the worker
	// if the list is empty, nothing will happen, so there's no need
	// to check here
	this.executeRefreshSetWorker(list);
    }//GEN-LAST:event_mnuRefreshAllActionPerformed


    private void doCreateSetAction() {
	SSPhotoset ssp = new SSPhotoset();
	ssp.setTagMatchMode(SSConstants.TAG_MATCH_MODE_NONE);
	ssp.setTags("");
	ssp.setTweetTemplate(SSConstants.DEFAULT_TWEET_TEMPLATE);

	(new SetEditor(this, EditorMode.CREATE, ssp)).setVisible(true);
    }


    private void doEditSetAction() {
	int index = this.jList1.getSelectedIndex();
	if (index == -1) {
	    JOptionPane.showMessageDialog(this,
		    "Please select a set from the list first.",
		    "Nothing Selected",
		    JOptionPane.INFORMATION_MESSAGE);
	} else {
	    SSPhotoset set = (SSPhotoset) this.listModel.get(index);
	    (new SetEditor(this, EditorMode.EDIT, set)).setVisible(true);
	}
    }


    private void doDeleteSetAction() {
	int index = jList1.getSelectedIndex();
	if (index != -1) {
	    SSPhotoset ssPhotoset = (SSPhotoset) listModel.get(index);
	    int confirm = JOptionPane.showConfirmDialog(this,
		    "Are you sure you want to delete the set\n"
		    + "\"" + ssPhotoset.getTitle() + "\"\n"
		    + " from Flickr?",
		    "Delete Set?",
		    JOptionPane.YES_NO_OPTION,
		    JOptionPane.QUESTION_MESSAGE);

	    if (confirm == JOptionPane.YES_OPTION) {
		try {
		    this.executeDeleteSetWorker(ssPhotoset);

		} catch (Exception e) {
		    logger.error("Error deleting photoset " + ssPhotoset, e);
		    JOptionPane.showMessageDialog(this,
			    "There was an error deleting the photoset.\n"
			    + e.getMessage() + "\n"
			    + "See the log for details.",
			    "Error", JOptionPane.ERROR_MESSAGE);
		}
	    }
	}

    }


    private void doRefreshSetAction() {
	int index = jList1.getSelectedIndex();
	int confirm = JOptionPane.YES_OPTION;


	if (index != -1) {

	    SSPhotoset ssPhotoset = (SSPhotoset) listModel.get(index);

	    // to update, set must be managed and ready for refresh
	    // if not ready for refresh, give user option to force refresh
	    if (!ssPhotoset.isManaged()) {
		confirm = JOptionPane.NO_OPTION;
		JOptionPane.showMessageDialog(this,
			"The set '" + ssPhotoset.getTitle() + "'\n"
			+ "is not managed by SuprSetr, so it cannot\n"
			+ "be refreshed.",
			"Unmanaged Set",
			JOptionPane.INFORMATION_MESSAGE);

	    } else if (!SSUtils.readyForUpdate(ssPhotoset.getLastRefreshDate())) {
		confirm = JOptionPane.showConfirmDialog(this,
			"This set has been refreshed recently.\n"
			+ "Do you want to force a refresh now?",
			"Force Refresh?",
			JOptionPane.YES_NO_OPTION,
			JOptionPane.QUESTION_MESSAGE);
	    }


	    if (confirm == JOptionPane.YES_OPTION) {
		this.executeRefreshSetWorker(ssPhotoset);
	    }

	} else {
	    JOptionPane.showMessageDialog(this,
		    "Please select a set from the list first.",
		    "Nothing Selected",
		    JOptionPane.INFORMATION_MESSAGE);
	}
    }


    private void doOpenInBrowserAction() {
	int index = jList1.getSelectedIndex();
	if (index != -1) {

	    SSPhotoset ssPhotoset = (SSPhotoset) listModel.get(index);

	    try {
		BrowserLauncher.openURL(ssPhotoset.getUrl());
	    } catch (Exception e) {
		logger.error("COULD NOT LAUNCH URL " + ssPhotoset.getUrl() + " IN BROWSER.", e);
		JOptionPane.showMessageDialog(this,
			"There was an error while trying to open the set\n"
			+ "in your browser. Check the log.",
			"Error Opening Set",
			JOptionPane.ERROR_MESSAGE);
	    }

	} else {
	    JOptionPane.showMessageDialog(this,
		    "Please select a set from the list first.",
		    "Nothing Selected",
		    JOptionPane.INFORMATION_MESSAGE);
	}
    }


    private void mnuPreferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPreferencesActionPerformed
	new Preferences(this, true).setVisible(true);
    }//GEN-LAST:event_mnuPreferencesActionPerformed

    private void txtFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFilterKeyReleased
	// Enable filter button when user types in this field
	this.btnFilter.setEnabled(true);
    }//GEN-LAST:event_txtFilterKeyReleased

    private void mnuLogsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLogsActionPerformed
	JFileChooser jfc = new JFileChooser();
	jfc.setDialogTitle("Select Location To Save Archive");
	jfc.setDialogType(JFileChooser.OPEN_DIALOG);
	jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

	String filename = "suprsetr_logs-" +
	    FlickrHelper.getInstance().getUsername() + "-" +
	    new java.util.Date() + ".zip";
	filename = filename.replaceAll(" ", "_");

	if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
	    // These are the files to include in the ZIP file
	    File[] source = Main.configDir.listFiles(new FilenameContainsFilter("suprsetr.log"));
	    logger.info("Adding " + source.length + " files to zip.");

	    // Create a buffer for reading the files
	    byte[] buf = new byte[1024];

	    try {
		// Create the ZIP file
		File target = new File(jfc.getSelectedFile(), filename);
		ZipOutputStream out = new ZipOutputStream(new FileOutputStream(target));

		// Compress the files
		for (File logFile : source) {
		    logger.info("Adding file " + logFile.getAbsolutePath() + " to archive.");
		    FileInputStream in = new FileInputStream(logFile);

		    // Add ZIP entry to output stream.
		    out.putNextEntry(new ZipEntry(logFile.getName()));

		    // Transfer bytes from the file to the ZIP file
		    int len;
		    while ((len = in.read(buf)) > 0) {
			out.write(buf, 0, len);
		    }

		    // Complete the entry
		    out.closeEntry();
		    IOUtil.close(in);
		}

		out.close();

		JOptionPane.showMessageDialog(this,
			"Created " + target.getAbsolutePath() + "\n"
			+ "This file contains the SuprSetr logs,\n"
			+ "and can be sent to the developers for support.",
			"Log Archive Created",
			JOptionPane.INFORMATION_MESSAGE);

	    } catch (Exception e) {
		logger.warn("ERROR CREATING ZIP.", e);
		JOptionPane.showMessageDialog(this,
			"Something went wrong while creating the archive file.",
			"Error",
			JOptionPane.INFORMATION_MESSAGE);
	    }
	}

    }//GEN-LAST:event_mnuLogsActionPerformed

    private void btnAddSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSetActionPerformed
	this.mnuCreateSetActionPerformed(evt);
    }//GEN-LAST:event_btnAddSetActionPerformed

    private void btnEditSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditSetActionPerformed
	this.mnuEditSetActionPerformed(evt);
    }//GEN-LAST:event_btnEditSetActionPerformed

    private void btnDeleteSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteSetActionPerformed
	this.mnuDeleteSetActionPerformed(evt);
    }//GEN-LAST:event_btnDeleteSetActionPerformed

    private void btnRefreshSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshSetActionPerformed
	this.mnuRefreshSetActionPerformed(evt);
    }//GEN-LAST:event_btnRefreshSetActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
	try {
	    BrowserLauncher.openURL(SSConstants.DOWNLOAD_URL);
	} catch (Exception e) {
	    JOptionPane.showMessageDialog(this,
		    "There was an error opening the download URL.\n"
		    + "You can download the new version here:\n"
		    + SSConstants.DOWNLOAD_URL,
		    "Error Opening URL",
		    JOptionPane.ERROR_MESSAGE);
	    logger.warn("ERROR OPENING DOWNLOAD URL.", e);
	}
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void mnuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuAboutActionPerformed
	new AboutDialog(this, true).setVisible(true);
    }//GEN-LAST:event_mnuAboutActionPerformed

    private void mnuFavrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuFavrActionPerformed
	int confirm = JOptionPane.showConfirmDialog(this,
		"FavrTagr will scan all of your photos, adding 'fav' tags.\n"
		+ "Every ten favorites will get a tag: fav10, fav20, etc.\n"
		+ "This process can take a long time.\n"
		+ "Are you sure you want to continue?",
		"Run FavrTagr?",
		JOptionPane.YES_NO_OPTION,
		JOptionPane.QUESTION_MESSAGE);

	if (confirm == JOptionPane.YES_OPTION) {
	    BlockerPanel blocker = new BlockerPanel(this, "Adding Fav Tags");
	    setGlassPane(blocker);
	    blocker.block("");

	    new FavrTagrWorker(blocker).execute();
	}
    }//GEN-LAST:event_mnuFavrActionPerformed

    private void mnuPopupCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPopupCreateActionPerformed
	this.doCreateSetAction();
    }//GEN-LAST:event_mnuPopupCreateActionPerformed

    private void mnuPopupEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPopupEditActionPerformed
	this.doEditSetAction();
    }//GEN-LAST:event_mnuPopupEditActionPerformed

    private void mnuPopupDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPopupDeleteActionPerformed
	this.doDeleteSetAction();
    }//GEN-LAST:event_mnuPopupDeleteActionPerformed

    private void mnuPopupRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPopupRefreshActionPerformed
	this.doRefreshSetAction();
    }//GEN-LAST:event_mnuPopupRefreshActionPerformed

    private void mnuPopupOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPopupOpenActionPerformed
	this.doOpenInBrowserAction();
    }//GEN-LAST:event_mnuPopupOpenActionPerformed

    private void jList1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MousePressed
	if (evt.isPopupTrigger()) {
	    this.showPopup(evt);
	} else {
	    if (evt.getClickCount() == 2) {
		SSPhotoset ssp = (SSPhotoset) jList1.getSelectedValue();
		(new SetEditor(this, EditorMode.EDIT, ssp)).setVisible(true);
	    }
	}
    }//GEN-LAST:event_jList1MousePressed

    private void mnuSetOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSetOrderActionPerformed
	new SetOrderer(this, true).setVisible(true);
    }//GEN-LAST:event_mnuSetOrderActionPerformed

    private void mnuSSHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSSHelpActionPerformed
	JOptionPane.showMessageDialog(this,
		"Sorry, the help file has not been written yet.",
		"TODO",
		JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_mnuSSHelpActionPerformed

    private void mnuHideUnmanagedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuHideUnmanagedActionPerformed
	boolean hide = this.mnuHideUnmanaged.isSelected();
	LookupDAO.setKeyAndValue(SSConstants.LOOKUP_KEY_HIDE_UNMANAGED, DAOHelper.booleanToString(hide));

	String filter = this.getFilter();
	this.listModel.clear();

	BlockerPanel blocker = new BlockerPanel(this, "Filtering List");
	setGlassPane(blocker);
	new FilterSetListWorker(blocker, masterList, filter, listModel, this.mnuHideUnmanaged.isSelected(), null).execute();


    }//GEN-LAST:event_mnuHideUnmanagedActionPerformed

    private void mnuTutorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuTutorialActionPerformed
	new Tutorial(this, true).setVisible(true);
    }//GEN-LAST:event_mnuTutorialActionPerformed

    private void mnuLogWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuLogWindowActionPerformed
	this.logWindow.setVisible(!this.logWindow.isVisible());
    }//GEN-LAST:event_mnuLogWindowActionPerformed

    private void mnuViewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mnuViewMouseClicked
	if (this.logWindow.isVisible()) {
	    this.mnuLogWindow.setText("Hide Activity Log");
	} else {
	    this.mnuLogWindow.setText("Show Activity Log");
	}
    }//GEN-LAST:event_mnuViewMouseClicked

    private void mnuBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuBackupActionPerformed

	JFileChooser jfc = new JFileChooser();
	jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
	jfc.setMultiSelectionEnabled(false);
	jfc.setDialogTitle("Select Backup Directory");

	int option = jfc.showOpenDialog(this);
	if (option == JFileChooser.APPROVE_OPTION) {
	    BlockerPanel blocker = new BlockerPanel(this, "Backup Database");
	    setGlassPane(blocker);
	    blocker.block("");
	    new DatabaseBackupWorker(blocker, jfc.getSelectedFile()).execute();
	}

    }//GEN-LAST:event_mnuBackupActionPerformed

    private void mnuRestoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRestoreActionPerformed
	JFileChooser jfc = new JFileChooser();
	jfc.setDialogTitle("Select backup to restore from");
	jfc.setDialogType(JFileChooser.OPEN_DIALOG);
	jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

	int option = jfc.showOpenDialog(this);
	if (option == JFileChooser.APPROVE_OPTION) {
	    BlockerPanel blocker = new BlockerPanel(this, "Restore Database");
	    setGlassPane(blocker);
	    blocker.block("");
	    new DatabaseRestoreWorker(blocker, jfc.getSelectedFile()).execute();
	}
    }//GEN-LAST:event_mnuRestoreActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
	String filter = this.getFilter();
	this.listModel.clear();

	BlockerPanel blocker = new BlockerPanel(this, "Filtering List");
	setGlassPane(blocker);
	new FilterSetListWorker(blocker, masterList, filter, listModel, this.mnuHideUnmanaged.isSelected(), null).execute();

	// Filter has been performed, so disable button
	this.btnFilter.setEnabled(false);
    }//GEN-LAST:event_btnFilterActionPerformed

    private void mnuClearFaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuClearFaveActionPerformed
	int confirm = JOptionPane.showConfirmDialog(this,
		"FavrTagr will scan all of your photos, deleting all 'fav' tags.\n"
		+ "This process can take a long time.\n"
		+ "Are you sure you want to continue?",
		"Delete 'fav' tags?",
		JOptionPane.YES_NO_OPTION,
		JOptionPane.QUESTION_MESSAGE);
	if (confirm == JOptionPane.YES_OPTION) {
	    BlockerPanel blocker = new BlockerPanel(this, "Delete Fav Tags");
	    setGlassPane(blocker);
	    blocker.block("");
	    new FavDeleteWorker(blocker).execute();
	}
    }//GEN-LAST:event_mnuClearFaveActionPerformed

    private void mnuCaseSensitiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCaseSensitiveActionPerformed
	boolean caseSensitive = this.mnuCaseSensitive.isSelected();
	LookupDAO.setKeyAndValue(SSConstants.LOOKUP_KEY_CASE_SENSITIVE, DAOHelper.booleanToString(caseSensitive));

	String filter = this.getFilter();
	this.listModel.clear();

	try {
	    this.masterList = PhotosetDAO.getPhotosetListOrderByManagedAndTitle();
	} catch (Exception e) {
	    logger.error("Error while getting photoset list.", e);
	}
	
	BlockerPanel blocker = new BlockerPanel(this, "Filtering List");
	setGlassPane(blocker);
	new FilterSetListWorker(blocker, masterList, filter, listModel, this.mnuHideUnmanaged.isSelected(), null).execute();

    }//GEN-LAST:event_mnuCaseSensitiveActionPerformed

    private void btnRefreshAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshAllActionPerformed
	this.mnuRefreshAllActionPerformed(evt);
    }//GEN-LAST:event_btnRefreshAllActionPerformed


    public void doAuth() {
	while (!FlickrHelper.getInstance().authorize()) {
	    // Display the modal login dialog
	    (new LoginDialog(this, true)).setVisible(true);
	}


	logger.info("Authentication OK");
	this.setTitle("SuprSetr :: " + FlickrHelper.getInstance().getUsername());
    }


    public boolean setTitleExists(String title) {
	boolean exists = false;

	for (int i = 0; i < listModel.size(); i++) {
	    SSPhotoset setDef = (SSPhotoset) listModel.elementAt(i);
	    if (setDef.getTitle().equals(title)) {
		exists = true;
		break;
	    }
	}

	return exists;
    }


    private void confirmQuit() {
	int confirm = JOptionPane.YES_OPTION;

	// make the user confirm if busy
	if (MainWindow.isBlocked()) {
	    confirm = JOptionPane.showConfirmDialog(this,
		    "SuprSetr is currently busy.\n"
		    + "Are you sure you want to quit now?",
		    "Quit?",
		    JOptionPane.YES_NO_OPTION,
		    JOptionPane.QUESTION_MESSAGE);
	}


	if (confirm == JOptionPane.YES_OPTION) {
	    System.exit(0);
	}

    }


    /**
     * Determine if the window is in a blocked state.
     *
     * This can be called to determine if SuprSetr is currently in the middle of
     * a transaction with Flickr.
     *
     * @return true if the window is in a blocked state.
     */
    public static boolean isBlocked() {
	return theWindow.getGlassPane().isVisible();
    }


    public static MainWindow getMainWindow() {
	return theWindow;
    }


    public void scrollToPhotoset(String id) {
	for (int i = 0; i < this.listModel.size(); i++) {
	    SSPhotoset set = (SSPhotoset) this.listModel.elementAt(i);
	    if (id.equals(set.getId())) {
		this.makeIndexVisibleAndSelected(i);
		break;
	    }
	}
    }


    public void makeIndexVisibleAndSelected(int index) {
	if (this.listModel.size() > 0) {
	    if (this.listModel.size() < index) {
		index = 0;
	    }
	    this.jList1.scrollRectToVisible(this.jList1.getCellBounds(index, index));
	    this.jList1.setSelectedIndex(index);
	}
    }


    /**
     * Get the filter text. This will be returned in lower case, so comparisons
     * should be done in lower case.
     * 
     * @return
     */
    public String getFilter() {
	String filter = this.txtFilter.getText().toLowerCase().trim();
	if (filter.isEmpty()) {
	    filter = null;
	}

	return filter;
    }


    public List<SSPhotoset> getMasterList() {
	return this.masterList;
    }


    /**
     * Sets the master list, and updates the list model.
     * Only elements matching the filter text are added to the list model.
     * 
     * @param masterList
     */
//    public void setMasterList(List<SSPhotoset> masterList) {
//	this.masterList = masterList;
//	this.listModel.clear();
//	String filter = this.getFilter();
//	boolean hide = this.mnuHideUnmanaged.isSelected();
//
//	for (SSPhotoset set : this.masterList) {
//	    if (filter == null || set.getTitle().toLowerCase().contains(filter)) {
//		if ((!hide) || (set.isManaged())) {
//		    this.listModel.addElement(set);
//		}
//	    }
//	}
//
//	this.setTitle("SuprSetr :: " + FlickrHelper.getInstance().getUsername() + " :: " + this.masterList.size() + " sets");
//    }
    /**
     * This will replace the master list that backs the list model.
     *
     * The list model will be refreshed by the FilterSetListWorker class.
     *
     * If you need to add, delete, or update a single set in the list model,
     * use one of the other methods. This method should only be used when the
     * entire list needs to be refreshed, as it can take time if the user has a
     * lot of sets.
     * 
     * @param masterList
     * @param visiblePhotosetId
     */
    public void setMasterList(List<SSPhotoset> masterList, String visiblePhotosetId) {
	this.masterList = masterList;

	String filter = this.getFilter();
	this.listModel.clear();

	BlockerPanel blocker = new BlockerPanel(this, "Filtering List");
	setGlassPane(blocker);
	new FilterSetListWorker(blocker, masterList, filter, listModel, this.mnuHideUnmanaged.isSelected(), visiblePhotosetId).execute();
    }


    /**
     * Delete the specified set from the backing list and list model.
     *
     * @param photoset
     */
    public void deletePhotosetFromListModel(SSPhotoset photoset) {
	this.listModel.removeElement(photoset);
	this.masterList.remove(photoset);
	this.updateTitle();
    }


    /**
     * This method will insert a single photoset into the list model.
     *
     * The photoset must exist in the supplied master list as well. The master
     * list will be set, and the specified photoset will be added to the
     * list model.
     *
     * The purpose of having this method is to allow us to add a single set
     * without forcing an update of the entire list in the GUI.
     *
     * This method must honor the filter text and the hide unmanaged sets menu
     * selection.
     *
     * @param masterList
     * @param photoset
     */
    public void insertPhotosetInListModel(List<SSPhotoset> masterList, SSPhotoset photoset) {

	int index = masterList.indexOf(photoset);

	if (index != -1) {
	    String filter = this.txtFilter.getText();
	    this.masterList = masterList;

	    // update the list model if the photoset should be displayed
	    if (filter == null || photoset.getTitle().toLowerCase().contains(filter)) {
		if ((!mnuHideUnmanaged.isSelected()) || (photoset.isManaged())) {
		    try {
			SwingUtilities.invokeLater(new AddToListModel(index, photoset));
		    } catch (Exception e) {
			LogWindow.addLogMessage("Error while executing AddToListModel for photoset " + photoset.getId());
			logger.warn("Error while executing AddToListModel for photoset " + photoset.getId());
		    }
		}
	    }

	    this.updateTitle();
	} else {
	    logger.warn("ATTEMPTING TO INSERT A NEW PHOTOSET, BUT THE PHOTOSET "
		    + "IS NOT IN THE MASTER LIST.");
	}
    }


    /**
     * Update the photoset object in the list model.
     *
     * @param photoset
     */
    public void updatePhotosetInList(SSPhotoset photoset) {
	try {
	    SwingUtilities.invokeLater(new UpdatePhotosetInListModel(photoset));
	} catch (Exception e) {
	    LogWindow.addLogMessage("Error while executing UpdatePhotosetInListModel for photoset " + photoset.getId());
	    logger.warn("Error while executing UpdatePhotosetInListModel for photoset " + photoset.getId());
	}
    }


    public void updateTitle() {
	this.setTitle("SuprSetr :: " + FlickrHelper.getInstance().getUsername()
		+ " :: Showing " + this.listModel.size() + " of "
		+ this.masterList.size() + " sets");
    }


    public void setUpdateAvailable(boolean update) {
	this.btnUpdate.setVisible(update);
    }


    public void enableFilter(boolean enabled) {
	this.txtFilter.setEnabled(enabled);
	if (enabled) {
	    this.txtFilter.requestFocus();
	}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddSet;
    private javax.swing.JButton btnDeleteSet;
    private javax.swing.JButton btnEditSet;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnRefreshAll;
    private javax.swing.JButton btnRefreshSet;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList jList1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuItem mnuAbout;
    private javax.swing.JMenuItem mnuBackup;
    private javax.swing.JMenuItem mnuBrowser;
    private javax.swing.JCheckBoxMenuItem mnuCaseSensitive;
    private javax.swing.JMenuItem mnuClearFave;
    private javax.swing.JMenuItem mnuCreateSet;
    private javax.swing.JMenuItem mnuDeleteSet;
    private javax.swing.JMenu mnuEdit;
    private javax.swing.JMenuItem mnuEditSet;
    private javax.swing.JMenuItem mnuFavr;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuHelp;
    private javax.swing.JCheckBoxMenuItem mnuHideUnmanaged;
    private javax.swing.JMenuItem mnuLogWindow;
    private javax.swing.JMenuItem mnuLogs;
    private javax.swing.JPopupMenu mnuPopup;
    private javax.swing.JMenuItem mnuPopupCreate;
    private javax.swing.JMenuItem mnuPopupDelete;
    private javax.swing.JMenuItem mnuPopupEdit;
    private javax.swing.JMenuItem mnuPopupOpen;
    private javax.swing.JMenuItem mnuPopupRefresh;
    private javax.swing.JMenuItem mnuPreferences;
    private javax.swing.JPopupMenu.Separator mnuPrefsSeparator;
    private javax.swing.JMenuItem mnuQuit;
    private javax.swing.JMenuItem mnuRefreshAll;
    private javax.swing.JMenuItem mnuRefreshSet;
    private javax.swing.JMenuItem mnuRestore;
    private javax.swing.JMenuItem mnuSSHelp;
    private javax.swing.JMenuItem mnuSetOrder;
    private javax.swing.JMenu mnuTools;
    private javax.swing.JMenuItem mnuTutorial;
    private javax.swing.JMenu mnuView;
    private javax.swing.JTextField txtFilter;
    // End of variables declaration//GEN-END:variables


    public void executeAddSetWorker(SSPhotoset ssPhotoset) {
	BlockerPanel blocker = new BlockerPanel(this, "Adding set " + ssPhotoset.getTitle());
	setGlassPane(blocker);
	blocker.block("");
	new AddPhotosetWorker(blocker, ssPhotoset).execute();
    }


    public void executeRefreshSetWorker(SSPhotoset ssPhotoset) {
	BlockerPanel blocker = new BlockerPanel(this, "Refreshing set \"" + ssPhotoset.getTitle() + "\"");
	setGlassPane(blocker);
	blocker.block("");

	List<SSPhotoset> list = new ArrayList<SSPhotoset>();
	list.add(ssPhotoset);
	new RefreshPhotosetWorker(blocker, list).execute();
    }


    public void executeRefreshSetWorker(List<SSPhotoset> list) {
	BlockerPanel blocker = new BlockerPanel(this, "Refreshing " + list.size() + " managed sets");
	setGlassPane(blocker);
	blocker.block("");

	new RefreshPhotosetWorker(blocker, list).execute();
    }


    public void executeLoadFlickrSetsWorker() {
	BlockerPanel blocker = new BlockerPanel(this, "Loading Sets");
	setGlassPane(blocker);
	blocker.block("");
	new LoadFlickrSetsWorker(blocker).execute();
    }


    public void executeDeleteSetWorker(SSPhotoset ssPhotoset) {
	BlockerPanel blocker = new BlockerPanel(this, "Deleting set " + ssPhotoset.getTitle());
	setGlassPane(blocker);
	blocker.block("");
	new DeletePhotosetWorker(blocker, ssPhotoset).execute();
    }


    public void showPopup(MouseEvent e) {
	if (e.getComponent() instanceof JList) {
	    JList list = (JList) e.getComponent();

	    int index = e.getY() / (int) list.getCellBounds(0, 0).getHeight();
	    if (list.getModel().getSize() >= index) {
		list.setSelectedIndex(index);
		this.mnuPopup.show(e.getComponent(), e.getX(), e.getY());
	    }
	}
    }


    class AddToListModel implements Runnable {

	private SSPhotoset photoset;

	private int index;


	AddToListModel(int index, SSPhotoset photoset) {
	    this.index = index;
	    this.photoset = photoset;
	}


	public void run() {
	    listModel.add(index, photoset);
	    scrollToPhotoset(photoset.getId());
	}

    }


    class UpdatePhotosetInListModel implements Runnable {

	private SSPhotoset photoset;


	UpdatePhotosetInListModel(SSPhotoset photoset) {
	    this.photoset = photoset;
	}


	public void run() {
	    int index = listModel.indexOf(photoset);

	    if (index != -1) {
		listModel.set(index, photoset);
	    }

	    index = masterList.indexOf(photoset);
	    if (index != -1) {
		masterList.set(index, photoset);
	    }
	}

    }
}

