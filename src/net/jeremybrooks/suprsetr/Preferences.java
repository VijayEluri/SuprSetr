/*
 * SuprSetr is Copyright 2010 by Jeremy Brooks
 *
 * This file is part of SuprSetr.
 *
 *  SuprSetr is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  SuprSetr is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with SuprSetr.  If not, see <http://www.gnu.org/licenses/>.
*/

package net.jeremybrooks.suprsetr;


import javax.swing.JOptionPane;
import net.jeremybrooks.jinx.logger.JinxLogger;
import net.jeremybrooks.suprsetr.dao.DAOHelper;
import net.jeremybrooks.suprsetr.dao.LookupDAO;
import net.jeremybrooks.suprsetr.dao.PhotosetDAO;
import net.jeremybrooks.suprsetr.flickr.FlickrHelper;
import net.jeremybrooks.suprsetr.twitter.TwitterHelper;
import net.jeremybrooks.suprsetr.workers.TwitterAuthenticatorWorker;
import net.whirljack.common.util.NetUtil;
import org.apache.log4j.Logger;


/**
 *
 * @author jeremyb
 */
public class Preferences extends javax.swing.JDialog {

    /** Logging. */
    private Logger logger = Logger.getLogger(Preferences.class);

    /** Constant defining the options tab panel. */
    public static final int OPTIONS_PANEL = 0;

    /** Constant defining the Flickr tab panel. */
    public static final int FLICKR_PANEL = 1;

    /** Constant defining the Twitter tab panel. */
    public static final int TWITTER_PANEL = 2;

    /** Constant defining the Proxy tab panel. */
    public static final int PROXY_PANEL = 3;
    
    /** Flag indicating if something has changed requiring list refresh. */
    private boolean refreshList = false;


    /**
     * Creates new form Preferences
     *
     * @param parent the parent frame.
     * @param modal display as modal or not.
     */
    public Preferences(java.awt.Frame parent, boolean modal) {
	super(parent, modal);
	initComponents();

	// After window is init'ed, lookup values in DB and set accordingly
	this.cbxAddVia.setSelected(DAOHelper.stringToBoolean(LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_ADD_VIA)));

	String refresh = LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_REFRESH_WAIT);
	if (refresh == null) {
	    this.cmbRefresh.setSelectedItem(SSConstants.DEFAULT_REFRESH_WAIT);
	} else {
	    this.cmbRefresh.setSelectedItem(refresh);
	}

	this.cbxDetailLog.setSelected(DAOHelper.stringToBoolean(LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_DETAIL_LOG)));
	this.cmbLogSize.setSelectedItem(Main.getLoggingProperties().getProperty("size"));
	this.cmbLogIndex.setSelectedItem(Main.getLoggingProperties().getProperty("index"));

	// The value "0" indicates a special selection for interval, so set accordingly
	String interval = LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_FAVRTAGR_INTERVAL);
	if (interval.equals("0")) {
	    this.cmbFavr.setSelectedIndex(3);
	} else {
	    this.cmbFavr.setSelectedItem(LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_FAVRTAGR_INTERVAL));
	}

	this.cbxUpdate.setSelected(DAOHelper.stringToBoolean(LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_CHECK_FOR_UPDATE)));
	this.updateStatus();

	this.cbxProxy.setSelected(DAOHelper.stringToBoolean(LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_USE_PROXY)));
	this.txtProxyHost.setText(LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_PROXY_HOST));
	this.txtProxyPort.setText(LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_PROXY_PORT));
	this.txtProxyUser.setText(LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_PROXY_USER));
	this.txtProxyPass.setText(LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_PROXY_PASS));
	this.cbxProxyActionPerformed(null);

	this.cbxAddManaged.setSelected(DAOHelper.stringToBoolean(LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_ADD_MANAGED)));
	this.refreshList = false;
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        cbxAddVia = new javax.swing.JCheckBox();
        cbxAddManaged = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        cmbRefresh = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        cbxUpdate = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        cmbFavr = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        cbxDetailLog = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        cmbLogSize = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        cmbLogIndex = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        pnlFlickr = new javax.swing.JPanel();
        lblFlickrStatus = new javax.swing.JLabel();
        btnFlickr = new javax.swing.JButton();
        pnlTwitter = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();
        btnAction = new javax.swing.JButton();
        lblMessage = new javax.swing.JLabel();
        pnlProxy = new javax.swing.JPanel();
        cbxProxy = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtProxyHost = new javax.swing.JTextField();
        txtProxyPort = new javax.swing.JTextField();
        txtProxyUser = new javax.swing.JTextField();
        txtProxyPass = new javax.swing.JPasswordField();
        btnOK = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SuprSetr Preferences");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        cbxAddVia.setText("Add \"via SuprSetr\" to tweets if there is room");
        cbxAddVia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxAddViaActionPerformed(evt);
            }
        });

        cbxAddManaged.setText("Add \"Managed by SuprSetr\" to end of descriptions");
        cbxAddManaged.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxAddManagedActionPerformed(evt);
            }
        });

        jLabel1.setText("Photosets need refresh after");

        cmbRefresh.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "6", "12", "24", "48", "72" }));
        cmbRefresh.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbRefreshItemStateChanged(evt);
            }
        });
        cmbRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbRefreshActionPerformed(evt);
            }
        });

        jLabel2.setText("hours.");

        cbxUpdate.setText("Check for updates at startup");
        cbxUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxUpdateActionPerformed(evt);
            }
        });

        jLabel3.setText("FavrTagr adds a tag for every");

        cmbFavr.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10", "25", "100", "10 up to 100, then 100" }));
        cmbFavr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFavrActionPerformed(evt);
            }
        });

        jLabel4.setText("favorites.");

        cbxDetailLog.setText("Enable detailed logging");
        cbxDetailLog.setToolTipText("Enable logging of detailed data from the Flickr library.");
        cbxDetailLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxDetailLogActionPerformed(evt);
            }
        });

        jLabel9.setText("Log file maximum size");

        cmbLogSize.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1MB", "5MB", "10MB" }));

        jLabel10.setText("Retain this many log files");

        cmbLogIndex.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2", "5", "10" }));

        jLabel11.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        jLabel11.setText("Note: Changes to log size or retention policy will take effect at next launch.");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(cbxAddVia)
                    .add(cbxUpdate)
                    .add(cbxAddManaged)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(9, 9, 9)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel3)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(cmbFavr, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel4))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel1)
                                .add(10, 10, 10)
                                .add(cmbRefresh, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(jLabel2))))
                    .add(cbxDetailLog)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(8, 8, 8)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jLabel9)
                                    .add(jLabel10))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(cmbLogSize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(cmbLogIndex, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(jLabel11))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(cbxAddVia)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(cbxAddManaged)
                .add(7, 7, 7)
                .add(cbxUpdate)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jLabel2)
                    .add(cmbRefresh, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(cmbFavr, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel4))
                .add(18, 18, 18)
                .add(cbxDetailLog)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(cmbLogSize, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel10)
                    .add(cmbLogIndex, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 8, Short.MAX_VALUE)
                .add(jLabel11)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Options", jPanel1);

        lblFlickrStatus.setText("jLabel5");

        btnFlickr.setText("jButton1");
        btnFlickr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFlickrActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnlFlickrLayout = new org.jdesktop.layout.GroupLayout(pnlFlickr);
        pnlFlickr.setLayout(pnlFlickrLayout);
        pnlFlickrLayout.setHorizontalGroup(
            pnlFlickrLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlFlickrLayout.createSequentialGroup()
                .add(pnlFlickrLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlFlickrLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(lblFlickrStatus))
                    .add(btnFlickr))
                .addContainerGap(408, Short.MAX_VALUE))
        );
        pnlFlickrLayout.setVerticalGroup(
            pnlFlickrLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlFlickrLayout.createSequentialGroup()
                .addContainerGap()
                .add(lblFlickrStatus)
                .add(18, 18, 18)
                .add(btnFlickr)
                .addContainerGap(210, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Flickr", pnlFlickr);

        lblStatus.setText("jLabel1");

        btnAction.setText("jButton1");
        btnAction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActionActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout pnlTwitterLayout = new org.jdesktop.layout.GroupLayout(pnlTwitter);
        pnlTwitter.setLayout(pnlTwitterLayout);
        pnlTwitterLayout.setHorizontalGroup(
            pnlTwitterLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlTwitterLayout.createSequentialGroup()
                .add(pnlTwitterLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlTwitterLayout.createSequentialGroup()
                        .add(20, 20, 20)
                        .add(lblStatus, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE))
                    .add(btnAction)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlTwitterLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(lblMessage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 361, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlTwitterLayout.setVerticalGroup(
            pnlTwitterLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlTwitterLayout.createSequentialGroup()
                .addContainerGap()
                .add(lblStatus)
                .add(18, 18, 18)
                .add(btnAction)
                .add(34, 34, 34)
                .add(lblMessage)
                .addContainerGap(176, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Twitter", pnlTwitter);

        pnlProxy.setBorder(javax.swing.BorderFactory.createTitledBorder("Network Proxy Settings"));

        cbxProxy.setText("Use Proxy");
        cbxProxy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxProxyActionPerformed(evt);
            }
        });

        jLabel5.setText("Host:");

        jLabel6.setText("Port:");

        jLabel7.setText("Username:");

        jLabel8.setText("Password:");

        org.jdesktop.layout.GroupLayout pnlProxyLayout = new org.jdesktop.layout.GroupLayout(pnlProxy);
        pnlProxy.setLayout(pnlProxyLayout);
        pnlProxyLayout.setHorizontalGroup(
            pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlProxyLayout.createSequentialGroup()
                .add(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlProxyLayout.createSequentialGroup()
                        .add(23, 23, 23)
                        .add(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel8)
                            .add(jLabel6)
                            .add(jLabel5)))
                    .add(pnlProxyLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel7)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlProxyLayout.createSequentialGroup()
                        .add(7, 7, 7)
                        .add(txtProxyPass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 203, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(pnlProxyLayout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(txtProxyPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(txtProxyUser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 177, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(197, Short.MAX_VALUE))
            .add(pnlProxyLayout.createSequentialGroup()
                .add(92, 92, 92)
                .add(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlProxyLayout.createSequentialGroup()
                        .add(cbxProxy)
                        .addContainerGap())
                    .add(txtProxyHost, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)))
        );
        pnlProxyLayout.setVerticalGroup(
            pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlProxyLayout.createSequentialGroup()
                .add(cbxProxy)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtProxyHost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtProxyPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtProxyUser, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel7))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtProxyPass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel8))
                .addContainerGap(101, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Proxy", pnlProxy);

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(btnOK))
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 339, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnOK)
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-526)/2, (screenSize.height-398)/2, 526, 398);
    }// </editor-fold>//GEN-END:initComponents


    /**
     * Handle clicks on the Authorize/De-authorize button.
     *
     * @param evt
     */
    private void btnActionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActionActionPerformed
	this.lblMessage.setText("");

	if (btnAction.getText().equals("Authorize")) {
	    BlockerPanel blocker = new BlockerPanel(this, "Twitter Authorization");
	    setGlassPane(blocker);
	    new TwitterAuthenticatorWorker(this, blocker).execute();
	} else {
	    TwitterHelper.logout();
	    updateStatus();
	}
    }//GEN-LAST:event_btnActionActionPerformed

    private void cbxAddViaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxAddViaActionPerformed
	LookupDAO.setKeyAndValue(SSConstants.LOOKUP_KEY_ADD_VIA, DAOHelper.booleanToString(this.cbxAddVia.isSelected()));
    }//GEN-LAST:event_cbxAddViaActionPerformed


    /**
     * Update and close the window.
     * When the user clicks OK, we need to update the list view because the
     * options affect the state of the photosets.
     * 
     * @param evt
     */
    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed

	if (this.validateProxyInput()) {
	    if (this.cbxProxy.isSelected()) {
		// save proxy settings
		String host = this.txtProxyHost.getText().trim();
		if (host != null) {
		    if (host.startsWith("http://")) {
			host = host.substring("http://".length());
		    }
		}

		String port = this.txtProxyPort.getText().trim();
		String user = this.txtProxyUser.getText().trim();
		String pass = new String(this.txtProxyPass.getPassword());

		LookupDAO.setKeyAndValue(SSConstants.LOOKUP_KEY_USE_PROXY, DAOHelper.booleanToString(true));
		LookupDAO.setKeyAndValue(SSConstants.LOOKUP_KEY_PROXY_HOST, host);
		LookupDAO.setKeyAndValue(SSConstants.LOOKUP_KEY_PROXY_PORT, port);
		LookupDAO.setKeyAndValue(SSConstants.LOOKUP_KEY_PROXY_USER, user);
		LookupDAO.setKeyAndValue(SSConstants.LOOKUP_KEY_PROXY_PASS, pass);


		logger.info("Using proxy " + host + ":" + port);

		NetUtil.enableProxy(host, port, user, pass.toCharArray());

	    } else {
		// Save proxy setting and clear system properties
		LookupDAO.setKeyAndValue(SSConstants.LOOKUP_KEY_USE_PROXY, DAOHelper.booleanToString(false));
		NetUtil.clearProxy();
	    }

	    // save logging properties
	    Main.getLoggingProperties().setProperty("size", this.cmbLogSize.getSelectedItem().toString());
	    Main.getLoggingProperties().setProperty("index", this.cmbLogIndex.getSelectedItem().toString());
	    Main.storeLoggingProperties();

	    if (this.refreshList) {
		try {
		    MainWindow.getMainWindow().setMasterList(PhotosetDAO.getPhotosetListOrderByManagedAndTitle(), null);
		} catch (Exception e) {
		    logger.warn("Could not update the list.", e);
		}
	    }

	    this.setVisible(false);
	    this.dispose();
	} else {
	    JOptionPane.showMessageDialog(this,
		    "Please check your proxy settings.",
		    "Error In Proxy Settings",
		    JOptionPane.WARNING_MESSAGE);
	}
    }//GEN-LAST:event_btnOKActionPerformed


    /**
     * Simple check for valid input in the Proxy tab.
     *
     *
     * @return
     */
    private boolean validateProxyInput() {

	// everything is OK if the checkbox is not selected
	if (!this.cbxProxy.isSelected()) {
	    return true;
	}

	// Fail if the host is empty
	if (this.txtProxyHost.getText().trim().length() == 0) {
	    return false;
	}

	// Fail if the port is not an Integer
	try {
	    Integer.parseInt(this.txtProxyPort.getText().trim());
	} catch (Exception e) {
	    return false;
	}

	// Looks good
	return true;
    }


    private void cmbRefreshItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbRefreshItemStateChanged
//	LookupDAO.setKeyAndValue(SSConstants.LOOKUP_KEY_REFRESH_WAIT, cmbRefresh.getSelectedItem().toString());
//	this.refreshList = true;
    }//GEN-LAST:event_cmbRefreshItemStateChanged

    private void cbxUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxUpdateActionPerformed
	LookupDAO.setKeyAndValue(SSConstants.LOOKUP_KEY_CHECK_FOR_UPDATE, DAOHelper.booleanToString(this.cbxUpdate.isSelected()));
    }//GEN-LAST:event_cbxUpdateActionPerformed

    private void cmbFavrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFavrActionPerformed
	if (this.cmbFavr.getSelectedIndex() == 3) {
	    LookupDAO.setKeyAndValue(SSConstants.LOOKUP_KEY_FAVRTAGR_INTERVAL, "0");
	} else {
	    LookupDAO.setKeyAndValue(SSConstants.LOOKUP_KEY_FAVRTAGR_INTERVAL, this.cmbFavr.getSelectedItem().toString());
	}
    }//GEN-LAST:event_cmbFavrActionPerformed

    private void cmbRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbRefreshActionPerformed
	LookupDAO.setKeyAndValue(SSConstants.LOOKUP_KEY_REFRESH_WAIT, cmbRefresh.getSelectedItem().toString());
	this.refreshList = true;
    }//GEN-LAST:event_cmbRefreshActionPerformed

    private void btnFlickrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFlickrActionPerformed
	int confirm = JOptionPane.showConfirmDialog(this,
		"Clearing the authorization requires that SuprSetr restarts.\n"
		+ "If you continue, SuprSetr will exit, and you will have to\n"
		+ "launch it again to re-authorize Flickr.\n\n"
		+ "Do you want to continue?",
		"De-authorize and Exit?",
		JOptionPane.YES_NO_OPTION,
		JOptionPane.QUESTION_MESSAGE);
	if (confirm == JOptionPane.YES_OPTION) {
	    FlickrHelper.getInstance().deauthorize();
	    System.exit(2);
	}
    }//GEN-LAST:event_btnFlickrActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
	if (this.refreshList) {
	    try {
		MainWindow.getMainWindow().setMasterList(PhotosetDAO.getPhotosetListOrderByManagedAndTitle(), null);
	    } catch (Exception e) {
		logger.warn("Could not update the list.", e);
	    }
	}
    }//GEN-LAST:event_formWindowClosed


    /**
     * Respond to clicks on the "Use Proxy" checkbox.
     *
     * <p>The text entryfields will be enabled/disabled based on the state of
     * the checkbox.</p>
     * 
     * @param evt
     */
    private void cbxProxyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxProxyActionPerformed
	this.txtProxyHost.setEnabled(this.cbxProxy.isSelected());
	this.txtProxyPass.setEnabled(this.cbxProxy.isSelected());
	this.txtProxyPort.setEnabled(this.cbxProxy.isSelected());
	this.txtProxyUser.setEnabled(this.cbxProxy.isSelected());
    }//GEN-LAST:event_cbxProxyActionPerformed

    
    /**
     * 
     * @param evt
     */
    private void cbxAddManagedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxAddManagedActionPerformed
	LookupDAO.setKeyAndValue(SSConstants.LOOKUP_KEY_ADD_MANAGED, DAOHelper.booleanToString(this.cbxAddManaged.isSelected()));
    }//GEN-LAST:event_cbxAddManagedActionPerformed

    private void cbxDetailLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxDetailLogActionPerformed
	LookupDAO.setKeyAndValue(SSConstants.LOOKUP_KEY_DETAIL_LOG, DAOHelper.booleanToString(this.cbxDetailLog.isSelected()));
	if (this.cbxDetailLog.isSelected()) {
	    // Turn on detailed logging
	    JinxLogger.setLogger(new MyJinxLogger());
	} else {
	    JinxLogger.setLogger(null);
	}
    }//GEN-LAST:event_cbxDetailLogActionPerformed


    public void updateStatus() {
	String token = LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_TWITTER_TOKEN);
	final String labelText;
	final String buttonText;
	final String flickrLabelText;
	final String flickrButtonText;

	if (token == null || token.isEmpty()) {
	    labelText = "You have not authorized Twitter yet.";
	    buttonText = "Authorize";
	} else {
	    labelText = "You are authorized to tweet as " + LookupDAO.getValueForKey(SSConstants.LOOKUP_KEY_TWITTER_USERNAME);
	    buttonText = "Deauthorize";
	}

	String username = FlickrHelper.getInstance().getUsername();
	if (username == null) {
	    flickrLabelText = "You are not logged in to Flickr.";
	    flickrButtonText = "Authorize";
	} else {
	    flickrLabelText = "You are logged in to Flickr as " + FlickrHelper.getInstance().getUsername();
	    flickrButtonText = "Clear Authorization";
	}

	java.awt.EventQueue.invokeLater(new Runnable() {

	    @Override
	    public void run() {
		lblStatus.setText(labelText);
		btnAction.setText(buttonText);
		lblFlickrStatus.setText(flickrLabelText);
		btnFlickr.setText(flickrButtonText);
	    }

	});
    }


    public void setTabIndex(int index) {
	this.jTabbedPane1.setSelectedIndex(index);
    }


    public void setMessage(String message) {
	this.lblMessage.setText(message);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAction;
    private javax.swing.JButton btnFlickr;
    private javax.swing.JButton btnOK;
    private javax.swing.JCheckBox cbxAddManaged;
    private javax.swing.JCheckBox cbxAddVia;
    private javax.swing.JCheckBox cbxDetailLog;
    private javax.swing.JCheckBox cbxProxy;
    private javax.swing.JCheckBox cbxUpdate;
    private javax.swing.JComboBox cmbFavr;
    private javax.swing.JComboBox cmbLogIndex;
    private javax.swing.JComboBox cmbLogSize;
    private javax.swing.JComboBox cmbRefresh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblFlickrStatus;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JPanel pnlFlickr;
    private javax.swing.JPanel pnlProxy;
    private javax.swing.JPanel pnlTwitter;
    private javax.swing.JTextField txtProxyHost;
    private javax.swing.JPasswordField txtProxyPass;
    private javax.swing.JTextField txtProxyPort;
    private javax.swing.JTextField txtProxyUser;
    // End of variables declaration//GEN-END:variables

}
